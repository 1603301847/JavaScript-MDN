/**
 * 数字类型
 * 整数   就是整数,例如 10, 400, 或者 -5.
 * 浮点数 (浮点) 有小数点或小数位，例如 12.5，和 56.7786543。
 * 双精度 双精度是一种特定类型的浮点数，它们具有比标准浮点数更高的精度（这意味着它们精确到更大的小数位数）。
 * 二进制   — 计算机的最基础语言; 0s and 1s
 * 八进制   — 基数8，每列使用0-7
 * 十六进制 — 基数16，每列使用0-9，然后使用a-f。 在CSS中设置颜色时，可能会遇到这些数字。
 */

let myInt = 5;
let myFloat = 6.667;
myInt; // 5
myFloat; // 6.667
typeof myInt; // "number"
typeof myFloat; // "number"





/**
 * 算术运算符
 * +	加法	               两个数相加。
 * -	减法	               从左边减去右边的数。
 * *	乘法	               两个数相乘。
 * /	除法	               用右边的数除左边的数
 * %	求余(有时候也叫取模)    在你将左边的数分成同右边数字相同的若干整数部分后，返回剩下的余数
 * **	幂                     取底数的指数次方，即指数所指定的底数相乘。
 */
6 + 9 // 15
20 - 15 // 5
3 * 7 // 21
10 / 5 // 2
8 % 3 // 2
5 ** 5 // 3125 Math.pow(5, 5) 相当于 5 ** 5

let num1 = 10;
let num2 = 50;
9 * num1; // 90
num1 ** 3; // 1000
num2 / num1; // 5
5 + 10 * 3; // 35 
num2 % 9 * num1; // 50
num2 + num1 / 8 + 2; // 53.25





/**
 * 运算符优先级
 * 乘法和除法总是先完成，然后是加法和减法（总是从左到右进行计算）
 * 如果想要改变计算优先级，可以把想要优先计算的部分用括号围住。
 */
(num2 + num1) / (8 + 2); // 6





/**
 * 自增和自减运算符
 * 需要反复把一个变量加1或减1。 
 * 这可以方便地使用增量（++）和递减（--）运算符来完成。
 */
// 不能将这些直接应用于一个数字，这可能看起来很奇怪
3++; // Uncaught SyntaxError: Invalid left-hand side expression in postfix operation

// 只能增加一个现有的变量
let num1 = 4;
num1++;
num1; // 5

let num2 = 6;
num2--;
num2; // 5





/**
 * 赋值运算符
 * 赋值运算符是向变量分配值的运算符。
 *  =    将右边的值赋给左边的变量
 *  +=	 加法赋值	右边的数值加上左边的变量，然后再返回新的变量。
 *  -=	 减法赋值	左边的变量减去右边的数值，然后再返回新的变量。
 *  *=	 乘法赋值	左边的变量乘以右边的数值，然后再返回新的变量。
 *  /=	 除法赋值	左边的变量除以右边的数值，然后再返回新的变量。
 */
let x = 3;   // 3
let y = 4;  // 4
x = y;      // 4

x = 3;
x += 4; // 7
// 等价于 
x = 3;
x = x + 4; // 7

x = 6;
x -= 3; // 3
// 等价于
x = 6;
x = x - 3; // 3

x = 2;
x *= 3; // 6
// 等价于
x = 2;
x = x * 3; // 6

x = 10;
x /= 5; // 2
// 等价于
x = 10;
x = x / 5; // 2

let x = 3; 
let y = 4;
x *= y; // 12